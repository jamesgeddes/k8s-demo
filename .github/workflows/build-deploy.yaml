name: Build, scan & publish all of the things.

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions: write-all

env:
  TF_VAR_repo_owner: ${{ github.repository_owner }}
  TF_VAR_dockerhub_namespace: ${{ github.repository_owner }}
  TF_VAR_project: ${{ github.event.repository.name }}
  TF_VAR_gtld: "net"
  REPO: ${{ github.repository }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}

jobs:


  list-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'services'

      - name: List services
        id: set-matrix
        run: |
          services=$(ls services/* -d | xargs -n 1 basename | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "services=${services}" >> $GITHUB_OUTPUT


  build-base-infra:
    # Simultaneously build all the underlying infra that the cluster will need to operate
    needs:
      - list-services
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 20
      matrix:
        module: [
          "hcp",
          "vault",
          "dockerhub",
          # "iam",
          # "networking",
        ]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'terraform/${{ matrix.module }}'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'eu-west-2'
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Set additional vars
        run: |
          TF_VAR_services=${{ needs.list-services.outputs.services }}
          TF_VAR_bucket_key="${{ github.event.repository.name }}/${{ matrix.module }}/terraform.tfstate"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init and Plan
        run: |
          cd terraform/${{ matrix.module }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.repository.name }}/${{ matrix.module }}/terraform.tfstate"

          terraform plan -out=plan.tfplan

      - name: test tf plan
        uses: instrumenta/conftest-action@master
        with:
          files: plan.tfplan

      - name: Terraform Apply
        run: |
          cd terraform/${{ matrix.module }}
          terraform apply "plan.tfplan"


  build-services:
    # Build the containers that will run the services
    needs:
      - build-base-infra
      - list-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{fromJson(needs.list-services.outputs.services)}}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'services/${{ matrix.service }}'

      - name: set env var
        run: |
          TF_VAR_services=$(ls services)

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version-file: 'services/${{ matrix.service }}/.python-version'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/${{ matrix.service }}/requirements.txt

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit
        run: bandit -r services/${{ matrix.service }}/

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          python -m unittest discover -s tests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: services/${{ matrix.service }}
          tags: |
            ${{ github.repository }}-${{ matrix.service }}:latest
            ${{ github.repository }}-${{ matrix.service }}:${{ github.run_number }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          severity: 'CRITICAL,HIGH'
          scan-type: 'image'
          image-ref: ${{ github.repository }}-${{ matrix.service }}:latest
          exit-code: '1'

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ github.repository }}-${{ matrix.service }}:latest
          docker push ${{ github.repository }}-${{ matrix.service }}:${{ github.run_number }}

  deploy-k8s:
    # Spin up a k8s cluster and then configure ArgoCD to deploy the services
    needs: build-services
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: set env var
        run: |
          TF_VAR_services=${{fromJson(needs.list-services.outputs.matrix)}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'eu-west-2'
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Replace Variables in ApplicationSet File
        run: envsubst < argocd/application-set-template.yaml > argocd/application-set.yaml

      - name: Process Terraform Modules
        run: |
          modules=(
            "k8s-cluster"
            "k8s-services"
          )
          
          for module in "${modules[@]}"; do
            echo "Processing Terraform module: $module"
            module_path="terraform/$module"
            plan_path="$module_path/plan.tfplan"
          
            cd $module_path
            terraform init
            terraform plan -out=$plan_path
            terraform apply "$plan_path"
            cd -
          done